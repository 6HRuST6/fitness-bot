package core

import (
	"fitness-bot/handlers"
	"fitness-bot/models"
	"fmt"
	"log"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func handleMessage(update tgbotapi.Update) {
	if handlers.CheckAndHandlePoll(Bot, update) {
		return
	}
	if update.Message == nil {
		return
	}

	chatID := update.Message.Chat.ID
	text := update.Message.Text

	// ‚úçÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ñ–æ—Ç–æ
	if fileID, ok := handlers.PendingComment(chatID); ok {
		handlers.SavePhotoComment(Bot, update, fileID)
		return
	}

	// ‚úçÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —ç—Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
	if handlers.CheckAndHandleRecommendation(Bot, update) {
		return
	}

	// üì∑ –§–æ—Ç–æ
	if update.Message.Photo != nil {
		userID := update.Message.From.ID
		fileID := update.Message.Photo[len(update.Message.Photo)-1].FileID

		err := models.SaveUserPhoto(userID, fileID)
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ:", err)
			msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ.")
			Bot.Send(msg)
			return
		}

		handlers.MarkPendingPhoto(chatID, fileID)

		msg := tgbotapi.NewMessage(chatID, "‚úçÔ∏è –ù–∞–ø–∏—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ñ–æ—Ç–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: –∑–∞–≤—Ç—Ä–∞–∫, –æ–±–µ–¥, —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ –∏ —Ç.–¥.")
		Bot.Send(msg)
		return
	}

	// üí¨ –ö–æ–º–∞–Ω–¥—ã/–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
	if handlers.CheckAndHandleBroadcast(Bot, update) {
		return
	}
	if text == "/results" {
		handlers.HandleResultsCommand(Bot, update)
		return
	}
	if text == "/voters" {
		handlers.HandleVotersCommand(Bot, update)
		return
	}
	if text == "üì£ –û–±—ä—è–≤–ª–µ–Ω–∏–µ" {
		handlers.StartBroadcastFromText(Bot, chatID, update.Message.From.ID)
		return
	}
	if text == "üìä –û–ø—Ä–æ—Å" {
		handlers.StartPollFromText(Bot, chatID, update.Message.From.ID)
		return
	}

	switch text {
	case "/start":
		userID := chatID
		username := update.Message.From.UserName
		name := update.Message.From.FirstName

		models.RegisterUser(userID, username, name)

		if userID == models.TrainerID {
			msg := tgbotapi.NewMessage(userID, "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç—Ä–µ–Ω–µ—Ä–∞:")
			msg.ReplyMarkup = trainerKeyboard()
			Bot.Send(msg)
		} else {
			msg := tgbotapi.NewMessage(userID, "–¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–π —Ñ–æ—Ç–æ –µ–¥—ã –∏–ª–∏ –æ—Ç—á—ë—Ç—ã!")
			Bot.Send(msg)
		}
		return

	case "/menu":
		if chatID == models.TrainerID {
			msg := tgbotapi.NewMessage(chatID, "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç—Ä–µ–Ω–µ—Ä–∞:")
			msg.ReplyMarkup = trainerKeyboard()
			Bot.Send(msg)
		}
		return

	case "/clients":
		if chatID != models.TrainerID {
			msg := tgbotapi.NewMessage(chatID, "‚õî –¢–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–µ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö.")
			Bot.Send(msg)
			return
		}

		users, err := models.GetAllUsers()
		if err != nil || len(users) == 0 {
			msg := tgbotapi.NewMessage(chatID, "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö.")
			Bot.Send(msg)
			return
		}

		for _, user := range users {
			text := models.FormatUser(user)
			button := tgbotapi.NewInlineKeyboardButtonData("üìÇ –ö–∞—Ä—Ç–æ—á–∫–∞", fmt.Sprintf("open_card_%d", user.ID))
			keyboard := tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(button),
			)

			msg := tgbotapi.NewMessage(chatID, text)
			msg.ReplyMarkup = keyboard
			Bot.Send(msg)
		}
		return
	}

	// ü§∑ –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ
	msg := tgbotapi.NewMessage(chatID, "–Ø –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ üòÖ")
	Bot.Send(msg)
}
