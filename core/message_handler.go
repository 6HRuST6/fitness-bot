package core

import (
	"fitness-bot/handlers"
	"fitness-bot/models"
	"fmt"
	"log"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

var pendingPhotoRequest = make(map[int64]bool)
var pendingCommentRequest = make(map[int64]bool)

func handleMessage(update tgbotapi.Update) {
	if handlers.CheckAndHandlePoll(Bot, update) {
		return
	}
	if update.Message == nil {
		return
	}

	chatID := update.Message.Chat.ID
	text := update.Message.Text

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ"
	if text == "üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ" {
		pendingPhotoRequest[chatID] = true
		msg := tgbotapi.NewMessage(chatID, "üì∑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ.")
		Bot.Send(msg)
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
	if text == "‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π" {
		pendingCommentRequest[chatID] = true
		msg := tgbotapi.NewMessage(chatID, "‚úçÔ∏è –ù–∞–ø–∏—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Ñ–æ—Ç–æ.")
		Bot.Send(msg)
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
	if pendingCommentRequest[chatID] {
	delete(pendingCommentRequest, chatID)

	user := update.Message.From
	comment := update.Message.Text

	// –°–æ–æ–±—â–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä—É
	commentMsg := fmt.Sprintf("‚úçÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç @%s (%s):\n\n%s", user.UserName, user.FirstName, comment)
	msg := tgbotapi.NewMessage(models.TrainerID, commentMsg)
	Bot.Send(msg)

	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
	Bot.Send(tgbotapi.NewMessage(chatID, "‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç—Ä–µ–Ω–µ—Ä—É!"))
	return
}
	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
	if update.Message.Photo != nil {
		if pendingPhotoRequest[chatID] {
			delete(pendingPhotoRequest, chatID)

			fileID := update.Message.Photo[len(update.Message.Photo)-1].FileID
			err := models.SaveUserPhoto(chatID, fileID)
			if err != nil {
				log.Println("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ:", err)
				Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ."))
			} else {
				Bot.Send(tgbotapi.NewMessage(chatID, "‚úÖ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!"))
			}
			return
		}

		Bot.Send(tgbotapi.NewMessage(chatID, "‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ."))
		return
	}

	// –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞
	if handlers.CheckAndHandleRecommendation(Bot, update) {
		return
	}
	if handlers.CheckAndHandleBroadcast(Bot, update) {
		return
	}
	if text == "/results" {
		handlers.HandleResultsCommand(Bot, update)
		return
	}
	if text == "/voters" {
		handlers.HandleVotersCommand(Bot, update)
		return
	}
	if text == "üì£ –û–±—ä—è–≤–ª–µ–Ω–∏–µ" {
		handlers.StartBroadcastFromText(Bot, chatID, update.Message.From.ID)
		return
	}
	if text == "üìä –û–ø—Ä–æ—Å" {
		handlers.StartPollFromText(Bot, chatID, update.Message.From.ID)
		return
	}

	switch text {
	case "/start":
		userID := chatID
		username := update.Message.From.UserName
		name := update.Message.From.FirstName

		models.RegisterUser(userID, username, name)

		if userID == models.TrainerID {
			msg := tgbotapi.NewMessage(userID, "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç—Ä–µ–Ω–µ—Ä–∞:")
			msg.ReplyMarkup = trainerKeyboard()
			Bot.Send(msg)
		} else {
			msg := tgbotapi.NewMessage(userID, "–¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ‚úÖ –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:")
			msg.ReplyMarkup = clientKeyboard()
			Bot.Send(msg)
		}
		return

	case "/menu":
		if chatID == models.TrainerID {
			msg := tgbotapi.NewMessage(chatID, "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç—Ä–µ–Ω–µ—Ä–∞:")
			msg.ReplyMarkup = trainerKeyboard()
			Bot.Send(msg)
		} else {
			msg := tgbotapi.NewMessage(chatID, "üìã –ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
			msg.ReplyMarkup = clientKeyboard()
			Bot.Send(msg)
		}
		return

	case "/clients":
		if chatID != models.TrainerID {
			msg := tgbotapi.NewMessage(chatID, "‚õî –¢–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–µ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö.")
			Bot.Send(msg)
			return
		}

		users, err := models.GetAllUsers()
		if err != nil || len(users) == 0 {
			msg := tgbotapi.NewMessage(chatID, "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö.")
			Bot.Send(msg)
			return
		}

		for _, user := range users {
			text := models.FormatUser(user)
			button := tgbotapi.NewInlineKeyboardButtonData("üìÇ –ö–∞—Ä—Ç–æ—á–∫–∞", fmt.Sprintf("open_card_%d", user.ID))
			keyboard := tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewKeyboardRow(button),
			)

			msg := tgbotapi.NewMessage(chatID, text)
			msg.ReplyMarkup = keyboard
			Bot.Send(msg)
		}
		return
	}

	// –ï—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ
	msg := tgbotapi.NewMessage(chatID, "–Ø –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ üòÖ")
	if chatID != models.TrainerID {
		msg.ReplyMarkup = clientKeyboard()
	}
	Bot.Send(msg)
}
