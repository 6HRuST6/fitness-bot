package handlers

import (
	"fitness-bot/models"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

var pendingBroadcast = make(map[int64]bool)

func HandleBroadcastStart(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	if update.CallbackQuery == nil {
		return
	}

	chatID := update.CallbackQuery.Message.Chat.ID
	userID := update.CallbackQuery.From.ID
	startBroadcast(bot, chatID, userID)
}

// –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
func StartBroadcastFromText(bot *tgbotapi.BotAPI, chatID int64, userID int64) {
	startBroadcast(bot, chatID, userID)
}

// —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞
func startBroadcast(bot *tgbotapi.BotAPI, chatID int64, trainerID int64) {
	pendingBroadcast[trainerID] = true

	msg := tgbotapi.NewMessage(chatID, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–¥–æ–ø–µ—á–Ω—ã–º.")
	bot.Send(msg)
}

func CheckAndHandleBroadcast(bot *tgbotapi.BotAPI, update tgbotapi.Update) bool {
	fromID := update.Message.Chat.ID
	if !pendingBroadcast[fromID] {
		return false
	}
	delete(pendingBroadcast, fromID)

	text := fmt.Sprintf("üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞:\n\n%s", update.Message.Text)

	users, err := models.GetAllUsers()
	if err != nil {
		bot.Send(tgbotapi.NewMessage(fromID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."))
		return true
	}

	for _, user := range users {
		if user.ID != models.TrainerID {
			msg := tgbotapi.NewMessage(user.ID, text)
			bot.Send(msg)
		}
	}

	bot.Send(tgbotapi.NewMessage(fromID, "‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –≤—Å–µ–º –ø–æ–¥–æ–ø–µ—á–Ω—ã–º."))
	return true
}
